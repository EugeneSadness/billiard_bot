from datetime import datetime
from logging import getLogger

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from app.tgbot.handlers.admin import handle_admin_booking
from app.tgbot.handlers.navigation import back_to_main
from app.infrastructure.database.repositories.booking_repository import BookingRepository
from app.infrastructure.database.repositories.client_repository import ClientRepository
from app.infrastructure.google.sheets_service import GoogleSheetsService
from app.schemas.booking import BookingCreate, BookingFilter, BookingStatus
from app.tgbot.keyboards.booking import (
    get_dates_keyboard, 
    get_time_keyboard, 
    get_end_time_keyboard,
    get_main_menu_inline_keyboard, 
    get_cancel_booking_keyboard, 
    get_admin_menu_inline_keyboard,
    get_table_preference_keyboard
)
from app.tgbot.states.booking import BookingStates
from app.tgbot.utils.booking import get_available_dates, get_available_times
from app.tgbot.utils.date_helpers import format_date_with_weekday
from config.config import settings
booking_router = Router()
logger = getLogger(__name__)

@booking_router.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    await state.set_state(BookingStates.waiting_for_action)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = message.from_user.username == settings.ADMIN_NAME
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥—É—à–∞ ü©∑\n\n"
        "–Ø –≤–∏—Ä—Ç. –ø–æ–º–æ—â–Ω–∏–∫ –ê–Ω–∂–µ–ª–ª–∞üçì\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?",
        reply_markup=get_admin_menu_inline_keyboard() if is_admin else get_main_menu_inline_keyboard(),
    )

@booking_router.callback_query(lambda c: c.data == "start_booking")
async def handle_booking_callback(
    callback: CallbackQuery, 
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    user_data = await state.get_data()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if user_data.get('is_admin'):
        await handle_admin_booking(callback, state)
        return

    if user_data.get('client_name'):
        await state.set_state(BookingStates.waiting_for_date)
        available_dates = await get_available_dates(sheets_service)
        await callback.message.edit_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data['client_name']}!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:",
            reply_markup=get_dates_keyboard(available_dates)
        )
    else:
        await state.set_state(BookingStates.waiting_for_name)
        await callback.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! \n\n"
            "–î–∞–≤–∞–π —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ, –∏ –º—ã –≤–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ üíã\n\n"
            "–ö–∞–∫ —Ç–≤–æ—ë –∏–º—è, –¥–æ—Ä–æ–≥—É—à–∞?"
        )

@booking_router.message(BookingStates.waiting_for_name)
async def process_name(
    message: Message, 
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    name = message.text.strip()
    is_admin = name == settings.ADMIN_NAME
    
    await state.update_data(
        client_name=name,
        is_admin=is_admin
    )
    
    if is_admin:
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëë\n\n"
            "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=get_admin_menu_inline_keyboard()
        )
        await state.set_state(BookingStates.waiting_for_action)
        return

    # –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∞
    available_dates = await get_available_dates(sheets_service)
    
    if not available_dates:
        await message.answer("–ò–∑–≤–∏–Ω–∏, –¥–æ—Ä–æ–≥—É—à–∞, –Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –≤—Å–µ –∑–∞–Ω—è—Ç–æ!")
        await state.clear()
        return
        
    await state.set_state(BookingStates.waiting_for_date)
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!ü´∂\n\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:",
        reply_markup=get_dates_keyboard(available_dates)
    )

@booking_router.callback_query(BookingStates.waiting_for_date)
async def process_date(
    callback: CallbackQuery, 
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    if callback.data == "back_to_main":
        await back_to_main(callback, state)
        return
        
    selected_date = callback.data.replace('date_', '')
    await state.update_data(selected_date=selected_date)

    state_data = await state.get_data()
    is_admin = state_data.get('is_admin', False)
    if is_admin:
        await state.set_state(BookingStates.waiting_for_table_preference)
        await callback.message.edit_text(
            "–ó–∞ –∫–∞–∫–∏–º —Å—Ç–æ–ª–æ–º –±—É–¥–µ—Ç –∫–ª–∏–µ–Ω—Ç?",
            reply_markup=get_table_preference_keyboard()
        )
    else:
        # –í–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º —Å—Ç–æ–ª–µ
        await state.set_state(BookingStates.waiting_for_table_preference)
        await callback.message.edit_text(
            f"–ó–∞ –∫–∞–∫–∏–º —Å—Ç–æ–ª–æ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, {state_data['client_name']}? üòº\n\n"
            f"(–¶–µ–Ω–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ–≥–æ 1200 —Ä—É–±./—á–∞—Å)",
            reply_markup=get_table_preference_keyboard()
        )

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞
@booking_router.callback_query(BookingStates.waiting_for_table_preference)
async def process_table_preference(
    callback: CallbackQuery,
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    if callback.data == "back_to_dates":
        await back_to_dates(callback, state, sheets_service)
        return

    table_pref = callback.data.replace('table_pref:', '')
    await state.update_data(table_preference=table_pref)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    selected_date = state_data['selected_date']
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
    available_times = await get_available_times(sheets_service, selected_date, table_pref)
    
    if not available_times:
        await callback.message.edit_text(
            "–ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—Å–µ —á–∞—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –∑–∞–Ω—è—Ç—ã! "
            "–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–æ–ª –∏–ª–∏ –¥–µ–Ω—å:",
            reply_markup=get_table_preference_keyboard()
        )
        return
        
    await state.set_state(BookingStates.waiting_for_start_time)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —á–∞—Å–∞ –Ω–∞—á–Ω—ë–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è:",
        reply_markup=get_time_keyboard(available_times)
    )

@booking_router.callback_query(BookingStates.waiting_for_start_time)
async def process_start_time(
    callback: CallbackQuery,
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    if callback.data == "back_to_dates":
        await back_to_dates(callback, state, sheets_service)
        return
        
    start_time = callback.data.replace('time:', '')
    state_data = await state.get_data()
    is_admin = state_data.get('is_admin', False)
    table_preference = state_data.get('table_preference')
    
    
    if table_preference == 'random':
        best_table, available_end_times = await sheets_service.get_best_table_and_end_times(
            state_data['selected_date'],
            start_time
        )
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç–æ–ª–∞ –≤ —á–∏—Å–ª–æ
        requested_table = int(table_preference)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        available_end_times = await sheets_service.get_available_end_times_for_table(
            state_data['selected_date'],
            start_time,
            requested_table
        )
        best_table = requested_table if available_end_times else None
    
    if not best_table or not available_end_times:
        await callback.message.edit_text(
            "–ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤! –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=get_admin_menu_inline_keyboard() if is_admin else get_main_menu_inline_keyboard()
        )
        return
    
    await state.update_data(
        start_time=start_time,
        table_id=best_table
    )
    
    await state.set_state(BookingStates.waiting_for_end_time)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –Ω–∞—à–∏ –∏–≥—Ä—ã:",
        reply_markup=get_end_time_keyboard(available_end_times)
    )

@booking_router.callback_query(BookingStates.waiting_for_end_time)
async def process_end_time(
    callback: CallbackQuery,
    state: FSMContext,
    sheets_service: GoogleSheetsService,
    booking_repository: BookingRepository,
    client_repository: ClientRepository
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if callback.data == "back_to_start_time":
        await back_to_start_time(callback, state, sheets_service)
        return
        
    end_time = callback.data.replace('end_time:', '')
    await state.update_data(end_time=end_time)
    
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    if user_data.get('client_phone'):
        await process_booking(callback.message, state, sheets_service, booking_repository, client_repository)
    else:
        # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        await state.set_state(BookingStates.waiting_for_phone)
        await callback.message.edit_text(
            "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä–æ–∫ üòâ"
        )

@booking_router.message(BookingStates.waiting_for_phone)
async def process_phone(
    message: Message,
    state: FSMContext,
    sheets_service: GoogleSheetsService,
    booking_repository: BookingRepository,
    client_repository: ClientRepository
):
    await state.update_data(client_phone=message.text)
    await process_booking(message, state, sheets_service, booking_repository, client_repository)

# –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
async def process_booking(
    message: Message,
    state: FSMContext,
    sheets_service: GoogleSheetsService,
    booking_repository: BookingRepository,
    client_repository: ClientRepository
):
    try:
        booking_data = await state.get_data()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç
        existing_client = await client_repository.get_client_by_phone(phone=booking_data.get('client_phone'))
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
        visit_date = datetime.strptime(booking_data['selected_date'], '%d.%m.%y')
        is_admin = booking_data.get('is_admin', False)

        if not existing_client:
            

            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–æ–≤—ã–π - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            client = await client_repository.create_client(
                name=booking_data['client_name'],
                phone=booking_data['client_phone'],
                visit_date=visit_date
            )
            client_id = client.id
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
            await client_repository.update_visit_date(
                client_id=existing_client.id,
                visit_date=visit_date
            )
            client_id = existing_client.id
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã date –∏ time
        booking_date = datetime.strptime(booking_data['selected_date'], '%d.%m.%y').date()
        start_time = datetime.strptime(booking_data['start_time'], '%H:%M').time()
        end_time = datetime.strptime(booking_data['end_time'], '%H:%M').time()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        booking = BookingCreate(
            table_id=booking_data['table_id'],
            client_name=booking_data['client_name'],
            client_id=client_id,
            client_phone=booking_data['client_phone'],
            booking_date=booking_date,
            start_time=start_time,
            end_time=end_time
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await booking_repository.create_booking(booking)

        # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
        sheets_updated = await sheets_service.update_booking_in_sheets(
            date_str=booking_data['selected_date'],
            start_time=booking_data['start_time'],
            end_time=booking_data['end_time'],
            table_id=booking_data['table_id'],
            client_name=booking_data['client_name'],
            client_phone=booking_data['client_phone']
        )

        if not sheets_updated:
            logger.warning("Failed to update Google Sheets")

        
        
        date_str, weekday_ru = format_date_with_weekday(booking_data['selected_date'])
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ, –¥–æ—Ä–æ–≥—É—à–∞!\n"
            f"–í—Ä–µ–º—è –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–π –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å {booking_data['start_time']} "
            f"–¥–æ {booking_data['end_time']}, "
            f"{date_str} ({weekday_ru}), "
            f"–∂–¥—É —Ç–µ–±—è –≤ The Feel's ü©∑\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—à–µ–π –∏–≥—Ä—ã üôå"
        )
        
        await message.answer(
            "–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ –±–∏–ª—å—è—Ä–¥–Ω–æ–≥–æ –∫–ª—É–±–∞ ü©∑\n\n"
            "+ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–µ—Ä–∏ –∫–∏–∏ —Ç–æ–ª—å–∫–æ —Ä—è–¥–æ–º —Å–æ —Å–≤–æ–∏–º —Å—Ç–æ–ª–æ–º, –∏ —Ç—Ä–∏ –∏—Ö –º–µ–ª–∫–æ–º —Ü–≤–µ—Ç–∞, "
            "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ü–≤–µ—Ç—É —Å—É–∫–Ω–∞. –î—Ä—É–≥–æ–π —Ü–≤–µ—Ç –º–µ–ª–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—ã üí¶\n\n"
            "+ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–∞–≤—å –Ω–∞–ø–∏—Ç–∫–∏ –Ω–∞ —Å—É–∫–Ω–æ –∏ –±–æ—Ä—Ç—ã —Å—Ç–æ–ª–∞, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –ø—Ä–æ–ª–∏—Ç—å. "
            "–ó–∞ –ø—Ä–æ–ª–∏—Ç–∏–µ –Ω–∞–ø–∏—Ç–∫–æ–≤ –Ω–∞ —Å—Ç–æ–ª –ø—Ä–∏–¥—ë—Ç—Å—è –≤–Ω–µ—Å—Ç–∏ 3000 —Ä—É–±. –≤–∑–Ω–æ—Å–∞ –∑–∞ —Ö–∏–º. —á–∏—Å—Ç–∫—É.\n"
            "(–ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Ç–æ –ø–µ—Ä–µ—Ç—è–Ω—É—Ç—å –Ω–æ–≤–æ–µ —Å—É–∫–Ω–æ —Å—Ç–æ–∏—Ç 25 000 —Ä—É–±.) üíµ\n\n"
            "+ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏ –≤–æ –≤—Ä–µ–º—è, —Å—Ç–æ–ª–∏–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ –Ω–∞ –≤—Å—ë –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏, "
            "–∞ –¥—Ä—É–≥–∏–º –º—ã –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º. –ü–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –≤—ã –ø—Ä–∏—à–ª–∏ –ø–æ–∑–∂–µ, —Å—Ç–æ–∏—Ç—å –æ–Ω –±—É–¥–µ—Ç "
            "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ ‚è∞"
        )
        
        await message.answer(
            "–•—ç–π, –¥–æ—Ä–æ–≥—É—à–∞, –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª! ü©∑\n\n"
            "@thefeels_billiard\n\n"
            "–ñ–¥—É ü´¶"
        )

        await message.answer(
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –ø—Ä–æ–π—Ç–∏ –∫ –Ω–∞–º:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç üó∫Ô∏è",
                        callback_data="how_to_find_us"
                    )
                ]]
            )
        )

        await state.set_state(BookingStates.waiting_for_action)
        await message.answer(
            "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?",
            reply_markup=get_admin_menu_inline_keyboard() if is_admin else get_main_menu_inline_keyboard()
        )
        
    except Exception as e:
        user_data = await state.get_data()
        is_admin = user_data.get('is_admin', False)
        
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_admin_menu_inline_keyboard() if is_admin else get_main_menu_inline_keyboard()
        )
        logger.error(f"Error creating booking: {e}")
    
    # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –∞ —Ç–æ–ª—å–∫–æ —É–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(
        selected_date=None,
        start_time=None,
        end_time=None,
        table_id=None
    )

@booking_router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BookingStates.waiting_for_action)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∞–¥–º–∏–Ω–∞
    user_data = await state.get_data()
    is_admin = user_data.get('is_admin', False)
    
    await callback.message.edit_text(
        "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?",
        reply_markup=get_admin_menu_inline_keyboard() if is_admin else get_main_menu_inline_keyboard()
    )

@booking_router.callback_query(lambda c: c.data == "back_to_dates")
async def back_to_dates(
    callback: CallbackQuery, 
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    available_dates = await get_available_dates(sheets_service)
    await state.set_state(BookingStates.waiting_for_date)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    user_data = await state.get_data()
    keyboard = get_dates_keyboard(available_dates, is_admin=user_data.get('is_admin', False))
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:",
        reply_markup=keyboard
    )

@booking_router.callback_query(lambda c: c.data == "back_to_start_time")
async def back_to_start_time(
    callback: CallbackQuery, 
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    state_data = await state.get_data()
    table_pref = state_data.get('table_preference', 'random')  # Get the stored table preference
    available_times = await get_available_times(sheets_service, state_data['selected_date'], table_pref)
    
    await state.set_state(BookingStates.waiting_for_start_time)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    keyboard = get_time_keyboard(available_times, is_admin=state_data.get('is_admin', False))
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —á–∞—Å–∞ –Ω–∞—á–Ω—ë–º:",
        reply_markup=keyboard
    )

@booking_router.callback_query(lambda c: c.data == "my_bookings")
async def handle_my_bookings(
    callback: CallbackQuery,
    state: FSMContext,
    booking_repository: BookingRepository
):
    user_data = await state.get_data()
    if not user_data.get('client_phone'):
        await callback.message.edit_text(
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –±—Ä–æ–Ω–∏, —Å–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ üòâ",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    now = datetime.now()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –±—Ä–æ–Ω–µ–π
    filters = BookingFilter(
        client_phone=user_data['client_phone'],
        date_from=now.date(),
        status=BookingStatus.ACTIVE
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bookings = await booking_repository.get_bookings(filters)
    
    if not bookings:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π, –¥–æ—Ä–æ–≥—É—à–∞! üòä\n"
            "–•–æ—á–µ—à—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫?",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –±—Ä–æ–Ω–µ–π
    message_text = "–¢–≤–æ–∏ –±—Ä–æ–Ω–∏, –¥–æ—Ä–æ–≥—É—à–∞:\n\n"
    for booking in bookings:
        date_str, weekday_ru = format_date_with_weekday(booking.booking_date.strftime('%d.%m.%y'))
        message_text += (
            f"üìÖ {date_str} ({weekday_ru})\n"
            f"üïí {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
            f"üé± –°—Ç–æ–ª: {booking.table.name}\n\n"
        )
    
    message_text += "–•–æ—á–µ—à—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë?"
    
    await callback.message.edit_text(
        message_text,
        reply_markup=get_main_menu_inline_keyboard()
    )

@booking_router.callback_query(lambda c: c.data == "cancel_booking")
async def handle_cancel_booking(
    callback: CallbackQuery,
    state: FSMContext,
    booking_repository: BookingRepository
):
    user_data = await state.get_data()
    if not user_data.get('client_phone'):
        await callback.message.edit_text(
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ üòâ",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    filters = BookingFilter(
        client_phone=user_data['client_phone'],
        date_from=datetime.now().date(),
        status=BookingStatus.ACTIVE
    )
    
    bookings = await booking_repository.get_bookings(filters)
    
    if not bookings:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã, –¥–æ—Ä–æ–≥—É—à–∞! üòä",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return
    
    await state.set_state(BookingStates.select_booking_to_cancel)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –±—Ä–æ–Ω—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_cancel_booking_keyboard(bookings)
    )

@booking_router.callback_query(BookingStates.select_booking_to_cancel)
async def handle_booking_cancellation(
    callback: CallbackQuery,
    state: FSMContext,
    booking_repository: BookingRepository,
    sheets_service: GoogleSheetsService
):
    if callback.data == "back_to_main":
        await back_to_main(callback, state)
        return
        
    booking_id = int(callback.data.replace('cancel_booking:', ''))
    booking = await booking_repository.get_booking(booking_id)
    
    
    if not booking:
        await callback.message.edit_text(
            "–ò–∑–≤–∏–Ω–∏, –Ω–æ —ç—Ç–∞ –±—Ä–æ–Ω—å —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω—å
    await booking_repository.update_booking_status(booking_id, BookingStatus.CANCELLED)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets (–æ—á–∏—â–∞–µ–º —è—á–µ–π–∫–∏)
    await sheets_service.clear_booking_in_sheets(
        date_str=booking.booking_date.strftime('%d.%m.%y'),
        start_time=booking.start_time.strftime('%H:%M'),
        end_time=booking.end_time.strftime('%H:%M'),
        table_id=booking.table_id
    )
    
    date_str, weekday_ru = format_date_with_weekday(booking.booking_date.strftime('%d.%m.%y'))
    await callback.message.edit_text(
        f"–ë—Ä–æ–Ω—å –Ω–∞ {date_str} ({weekday_ru}) "
        f"—Å {booking.start_time.strftime('%H:%M')} –¥–æ {booking.end_time.strftime('%H:%M')} "
        f"—É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞! üëå",
        reply_markup=get_main_menu_inline_keyboard()
    )
    
    await state.set_state(BookingStates.waiting_for_action)

@booking_router.callback_query(lambda c: c.data == "unblock_day")
async def handle_unblock_day(
    callback: CallbackQuery,
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã (–≤—Å–µ –¥–∞—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã)
    data = await sheets_service.get_sheet_data()
    available_dates = []
    
    if not data or len(data) < 3:
        await callback.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.",
            reply_markup=get_admin_menu_inline_keyboard()
        )
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    for idx in range(3, len(data), 4):
        try:
            date_cell = data[idx][0]
            if date_cell and date_cell.strip():
                date = datetime.strptime(date_cell, '%d.%m')
                date = date.replace(year=datetime.now().year)
                available_dates.append({
                    'date': date.strftime('%d.%m.%y'),
                    'weekday': date.strftime('%A')
                })
        except (ValueError, AttributeError):
            continue
    
    if not available_dates:
        await callback.message.edit_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
            reply_markup=get_admin_menu_inline_keyboard()
        )
        return

    await state.set_state(BookingStates.waiting_for_block_day)
    await state.update_data(action='unblock')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_dates_keyboard(available_dates, is_admin=True)
    )

@booking_router.callback_query(BookingStates.waiting_for_block_day)
async def process_block_unblock_day(
    callback: CallbackQuery,
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    if callback.data == "back_to_main":
        await back_to_main(callback, state)
        return

    state_data = await state.get_data()
    action = state_data.get('action', 'block')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    selected_date = callback.data.replace('date_', '')
    
    success = False
    if action == 'block':
        success = await sheets_service.block_day_in_sheets(selected_date)
        message = "–î–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!" if success else "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å."
    else:  # unblock
        success = await sheets_service.unblock_day_in_sheets(selected_date)
        message = "–î–µ–Ω—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!" if success else "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å."

    await state.set_state(BookingStates.waiting_for_action)
    await callback.message.edit_text(
        message,
        reply_markup=get_admin_menu_inline_keyboard()
    )

@booking_router.callback_query(lambda c: c.data == "how_to_find_us")
async def handle_how_to_find_us(callback: CallbackQuery, state: FSMContext):
    # First message with text
    await callback.message.answer(
        "The Feel's –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 7 üè†\n\n"
        "–í—Ö–æ–¥ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —É–ª–∏—Ü—ã –ü—É—à–∫–∏–Ω–∞, –º–µ–∂–¥—É –º–∞–≥–∞–∑–∏–Ω–æ–º '–ö—Ä–∞—Å–Ω–æ–µ –∏ –ë–µ–ª–æ–µ' "
        "–∏ –∫–æ—Ñ–µ–π–Ω–µ–π 'Coffee Like' ‚òïÔ∏è\n\n"
        "–°–ø—É—Å–∫–∞–π—Å—è –ø–æ –ª–µ—Å—Ç–Ω–∏—Ü–µ –≤–Ω–∏–∑, –∏ —Ç—ã –ø–æ–ø–∞–¥—ë—à—å –≤ –Ω–∞—à–µ —É—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ ü©∑"
    )
    
    # Send location photos (you'll need to prepare these media files)
    photo1 = FSInputFile("assets/the_feels.jpeg")
    photo2 = FSInputFile("assets/the_feels.jpeg")
    
    await callback.message.answer_photo(
        photo=photo1,
        caption="–í—Ö–æ–¥ –≤ The Feel's üö™"
    )
    
    await callback.message.answer_photo(
        photo=photo2,
        caption="–í–∏–¥ –∑–¥–∞–Ω–∏—è —Å —É–ª–∏—Ü—ã üè¢"
    )
    
    # Return to main menu
    user_data = await state.get_data()
    is_admin = user_data.get('is_admin', False)
    
    await callback.message.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?",
        reply_markup=get_admin_menu_inline_keyboard() if is_admin else get_main_menu_inline_keyboard()
    )

@booking_router.callback_query(lambda c: c.data == "contact_info")
async def handle_contact_info(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–¥–µ—Å—å...",
        reply_markup=get_main_menu_inline_keyboard()
    )

