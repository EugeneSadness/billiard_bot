from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from app.tgbot.states.booking import BookingStates
from app.tgbot.keyboards.booking import get_main_menu_keyboard, get_dates_keyboard, get_time_keyboard, get_end_time_keyboard
from app.tgbot.utils.booking import get_available_dates, get_available_times, get_available_end_times
from app.infrastructure.google.sheets_service import GoogleSheetsService
from app.infrastructure.database.repositories.booking_repository import BookingRepository
from app.schemas.booking import BookingCreate
from app.tgbot.utils.date_helpers import format_date_with_weekday

booking_router = Router()

@booking_router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥—É—à–∞!\n\n"
        "–Ø –≤–∏—Ä—Ç. –ø–æ–º–æ—â–Ω–∏–∫ –ê–Ω–∂–µ–ª–ª–∞\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?",
        reply_markup=get_main_menu_keyboard()
    )

@booking_router.message(F.text == "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª—å—è—Ä–¥–Ω—ã–π —Å—Ç–æ–ª–∏–∫ –≤ The Feel's")
async def start_booking(message: Message, state: FSMContext):
    await state.set_state(BookingStates.waiting_for_name)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ, –∏ –º—ã –≤–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ\n\n–ö–∞–∫ —Ç–≤–æ—ë –∏–º—è, –¥–æ—Ä–æ–≥—É—à–∞?")

@booking_router.message(BookingStates.waiting_for_name)
async def process_name(
    message: Message, 
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    await state.update_data(client_name=message.text)
    available_dates = await get_available_dates(sheets_service)
    
    if not available_dates:
        await message.answer("–ò–∑–≤–∏–Ω–∏, –¥–æ—Ä–æ–≥—É—à–∞, –Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –≤—Å–µ –∑–∞–Ω—è—Ç–æ!")
        await state.clear()
        return
        
    await state.set_state(BookingStates.waiting_for_date)
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:",
        reply_markup=get_dates_keyboard(available_dates)
    )

@booking_router.callback_query(BookingStates.waiting_for_date)
async def process_date(
    callback: CallbackQuery, 
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    selected_date = callback.data.replace('date_', '')
    await state.update_data(selected_date=selected_date)
    
    available_times = await get_available_times(sheets_service, selected_date)
    
    if not available_times:
        await callback.message.edit_text(
            "–ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—Å–µ —á–∞—Å—ã –∑–∞–Ω—è—Ç—ã! –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å:"
        )
        return
        
    await state.set_state(BookingStates.waiting_for_start_time)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —á–∞—Å–∞ –Ω–∞—á–Ω—ë–º:",
        reply_markup=get_time_keyboard(available_times)
    )

@booking_router.callback_query(BookingStates.waiting_for_start_time)
async def process_start_time(
    callback: CallbackQuery,
    state: FSMContext,
    sheets_service: GoogleSheetsService
):
    start_time = callback.data.replace('time:', '')
    state_data = await state.get_data()
    
    best_table, available_end_times = await sheets_service.get_best_table_and_end_times(
        state_data['selected_date'],
        start_time
    )
    
    if not best_table or not available_end_times:
        await callback.message.edit_text(
            "–ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤! –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:"
        )
        return
    
    await state.update_data(
        start_time=start_time,
        table_id=best_table
    )
    
    await state.set_state(BookingStates.waiting_for_end_time)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —á–∞—Å–∞ –∏–≥—Ä–∞–µ–º:",
        reply_markup=get_end_time_keyboard(available_end_times)
    )

@booking_router.callback_query(BookingStates.waiting_for_end_time)
async def process_end_time(
    callback: CallbackQuery,
    state: FSMContext
):
    end_time = callback.data.replace('end_time:', '')
    await state.update_data(end_time=end_time)
    
    await state.set_state(BookingStates.waiting_for_phone)
    await callback.message.edit_text(
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä–æ–∫ üòâ"
    )

@booking_router.message(BookingStates.waiting_for_phone)
async def process_phone(
    message: Message,
    state: FSMContext
):
    await state.update_data(client_phone=message.text)
    booking_data = await state.get_data()
    
    date_str, weekday_ru = format_date_with_weekday(booking_data['selected_date'])
    
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, –¥–æ—Ä–æ–≥—É—à–∞!\n"
        f"–í—Ä–µ–º—è –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–π –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å {booking_data['start_time']} "
        f"–¥–æ {booking_data['end_time']}, "
        f"{date_str} ({weekday_ru}), "
        f"–∂–¥—É —Ç–µ–±—è –≤ The Feel's ü©∑"
    )
    
    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î –∏ Google Sheets
    await state.clear()