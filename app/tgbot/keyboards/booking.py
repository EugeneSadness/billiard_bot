from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.infrastructure.database.models.booking import Booking
from app.tgbot.utils.date_helpers import format_date_with_weekday

def get_main_menu_inline_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ üé±",
        callback_data="start_booking"
    )
    builder.button(
        text="–ú–æ–∏ –±—Ä–æ–Ω–∏ üìÖ",
        callback_data="my_bookings"
    )
    builder.button(
        text="–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å ‚ùå",
        callback_data="cancel_booking"
    )
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    return builder.as_markup()

def get_dates_keyboard(available_dates: list) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    for date in available_dates:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º helper –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        date_str = date['date'][:5]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ dd.mm
        _, weekday_ru = format_date_with_weekday(date['date'])  # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        
        builder.button(
            text=f"{date_str} ({weekday_ru.capitalize()})",  # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            callback_data=f"date_{date['date']}"
        )
    
    builder.button(
        text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        callback_data="back_to_main"
    )
    
    builder.adjust(2)  
    return builder.as_markup()

def sort_time(time: str) -> int:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏.
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã, –ø—Ä–∏ —ç—Ç–æ–º –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç 24 —á–∞—Å–∞
    """
    hour = int(time.split(':')[0])
    # –ï—Å–ª–∏ —á–∞—Å –º–µ–∂–¥—É 0 –∏ 3, –¥–æ–±–∞–≤–ª—è–µ–º 24 —á–∞—Å–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if 0 <= hour <= 3:
        hour += 24
    return hour

def get_time_keyboard(available_times: list) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
    sorted_times = sorted(available_times, key=sort_time)
    
    for time in sorted_times:
        builder.button(
            text=f"{time}",
            callback_data=f"time:{time}"
        )
    
    builder.button(
        text="¬´ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã",
        callback_data="back_to_dates"
    )
    
    builder.adjust(3)  # –ü–æ —Ç—Ä–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä—è–¥
    return builder.as_markup()

def get_end_time_keyboard(available_end_times: list[str]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    sorted_times = sorted(available_end_times, key=sort_time)
    
    for time in sorted_times:
        builder.button(
            text=f"{time}",
            callback_data=f"end_time:{time}"
        )
    
    builder.button(
        text="¬´ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏",
        callback_data="back_to_start_time"
    )
    
    builder.adjust(3)  # –ü–æ —Ç—Ä–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä—è–¥
    return builder.as_markup() 

def get_cancel_booking_keyboard(bookings: list[Booking]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    for booking in bookings:
        date_str, weekday_ru = format_date_with_weekday(booking.booking_date.strftime('%d.%m.%y'))
        button_text = (
            f"{date_str} ({weekday_ru}) "
            f"{booking.start_time.strftime('%H:%M')}-{booking.end_time.strftime('%H:%M')}"
        )
        builder.button(
            text=button_text,
            callback_data=f"cancel_booking:{booking.id}"
        )
    
    builder.button(
        text="¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        callback_data="back_to_main"
    )
    
    builder.adjust(1)
    return builder.as_markup() 